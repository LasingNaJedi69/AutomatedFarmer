         IndexTpl
                .replace("<%name%>", defines.constants.name)
                .replace("<%description%>", defines.constants.description)
                .replace("<%scripts%>", "\"" + sectionNames.join("\", \"") + "\""),
            "utf8");

        Object.keys(sections).forEach(function(section) {
            var def = sections[section];
            Util.log("Writing '" + section + ".js' file for version " + version);
            Fs.writeFileSync(Path.join(dir, section + ".js"), SectionTpl
                .replace(/<%sectionName%>/g, section)
                .replace("<%sectionBody%>", def.join("\n")),
                "utf8"
            );

            // When we don't need to generate tests, bail out here.
            if (!tests)
                return;

            def = testSections[section];
            // test if previous tests already contained implementations by checking
            // if the difference in character count between the current test file
            // and the newly generated one is more than twenty characters.
            var body = TestSectionTpl
                .replace("<%version%>", version.replace("v", ""))
                .replace(/<%sectionName%>/g, section)
                .replace("<%testBody%>", def.join("\n\n"));
            var path = Path.join(dir, section + "Test.js");
            if (Fs.existsSync(path) && Math.abs(Fs.readFileSync(path, "utf8").length - body.length) >= 20) {
                Util.log("Moving old test file to '" + path + ".bak' to preserve tests " +
                    "that were already implemented. \nPlease be sure te check this file " +
                    "and move all implemented tests back into the newly generated test!", "error");
                Fs.renameSync(path, path + ".bak");
            }

            Util.log("Writing test file for " + section + ", version " + version);
            Fs.writeFileSync(path, body, "utf8");
        });
    });
};

if (!module.parent) {
    var argv = Optimist
      .w